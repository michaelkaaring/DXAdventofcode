<?php

class KeypadCodeBreaker
{
	private $currentPos = [1, 1];
	private $keypad;

	private $normalKeypad = [
		[1, 2, 3],
		[4, 5, 6],
		[7, 8, 9],
	];

	// Expand keypad array to 5x5, with zeros where no key is found
	private $crazyKeypad = [
		[0, 0, 1, 0, 0],
		[0, 2, 3, 4, 0],
		[5, 6, 7, 8, 9],
		[0, 'A', 'B', 'C', 0],
		[0, 0, 'D', 0, 0]
	];

	public function __construct($mode) {
		// Key 5 is located at [1, 1] for normal mode, and [2, 0] for crazy mode
		$this->currentPos = $mode == 'normal' ? [1, 1] : [2, 0];
		$this->keypad = $mode == 'normal' ? $this->normalKeypad : $this->crazyKeypad;
	}

	public function findCombination($data) {
		$combination = array();

		foreach($data as $sequence) {
			$moves = str_split($sequence);

			foreach($moves as $move) {
				$this->move($move);
			}

			$key = $this->keypad[$this->currentPos[0]][$this->currentPos[1]];
			$combination[] = $key;
		}

		foreach($combination as $c) {
			echo $c;
		}
	}

	private function move($dir) {
		$row = $this->currentPos[0];
		$col = $this->currentPos[1];

		switch ($dir) {
			case 'U':
				if ($row - 1 >= 0) {
					$row -= 1;
				}
				break;
			case 'D':
				if ($row + 1 < count($this->keypad)) {
					$row += 1;
				}
				break;
			case 'L':
				if ($col - 1 >= 0) {
					$col -= 1;
				}
				break;
			case 'R':
				if ($col + 1 < count($this->keypad)) {
					$col += 1;
				}
				break;
		}

		$key = $this->keypad[$row][$col];
		// Only move if the key is a valid key, per the layout of the keypad
		if ($key !== 0) {
			$this->currentPos[0] = $row;
			$this->currentPos[1] = $col;
		}
	}
}

$data = [
	'DLDRDDDLULDRRLUDDLDUURDRDUULDRDDRRLDLLUUDDLLRLRDRUURLUDURDDRURLUDDUULUURLLRRRRUDULUDLULLUURRLLRRURRUDUUURRLUUUDURDLLLDULDRLRDDDUDDUURLRRRURULLUDDUULDRRRDDLRLUDDRRDLRDURLRURUDDUULDDUUDDURRLUURRULRRLDLULLRLRUULDUDDLLLRDDULRUDURRDUUDUUDDUULULURDLUDRURDLUUDRDUURDDDRDRLDLDRURRLLRURURLLULLRRUULRRRRDLDULDDLRRRULRURRDURUDUUULDUUDRLDDLDUDDRULLUDUULRRRDRRDRDULDLURDDURLRUDLURLUDDDRLLURUUUUUUURUULDUUDDRLULRUDURRDLDUULLRLULLURDDDDDLRRDLRLLDDUDRRRDDURDLRRUDDUDLRRRDDURULRURRRLDRDUDLD',
	'LRRDUDUUUDRRURRDUUULULUDDLLDRRRUDDUULRRDRUDRLLRLRULRRDUUDRLDURUDLLLDRRDLRLUUDRUDRRRUDRRRULDRRLLRDDDLLRDDRULRLLRUDRLLLULDLDDRDRUUUUUULURLLRUDRDRLLULLRUUURRDRULULUDLDURRUUDURLLUDRDLDDULUDLRDDRLRLURULDRURRRRURRDDUDRULUUUDDDRULRULDLLURUUULRDDLRUURLRLDLUULLURDRDDDUDDDRLDRDLLDRDDDDURLUUULDDRURULUDDURDRDRLULDULURDUURDRLLUUUULRULUUDRLLDDRRURUURLDLLRRRDLRURDDLDLDRLRRDLDURULDDLULRRRUUDLRDUURDURLURDDLDLRURLLLDRDULDDRUDDULDDRRLDLRDRDLDUUDLUULRLUDUUDUUUULDURULRRUDULURLRLDRLULLLDUDLLLRUDURDDDURLDDLRLRRDLUDLDDDDLULDRLDUUULDRRDDLRUULDLULUUURUDDRLDDDULRUDRURUURUUURRULRURDURLLRLLUULUULURDRLLUDDLU',
	'LLDURDUDRLURUDRLRLUDDRRURDULULDDUDUULRRLRLRRDRDRDURRLRLURRLRUDULLUULLURUDDRLDDDRURLUUDLDURRDURDDLUULRDURRUUURLRRURRDRDRDURRRLULLDRUDLRUDURDRDDLLULLULRRUDULDDRDRRDLLLDLURLRDRDLUDDRLDDLDRULDURLLRLDRDLUDDDDLDUUDRLLRRRRLDDRRLRLURLLRLLUULLDUUDLRDRRRDRDLLDULLDRLDDUDRDDRURRDDLRDLRRUUDRRRRDURUULDRDDURLURRRRURRDRRULULURULUUUDRRRLDLLLDDRULRUDDURDRLDDRDLULLLRURUDRLRDDLDLRRRUURDURLDURRUUDDLRDRUUUURDLRLULRUUDRLDLULLULUURURDULUDUDRRRLLRLURLLDLRRURURRUDLUDDDDRDUDUDUUUULLDRDLLLLUUUUDRLRLUDURLLUDRUUDLLURUULDDDDULUUURLLDL',
	'DLULLRDLRRLLLDLRRURRDRURDRUUULDDRLURURRDLRRULUUDDRLRRLDULRRUUDUULDDDUDLLDLURDRLLULLUUULLDURDRRRDDLRDUDRRRLRLDRRLRLULDDUDURRRLDLRULDULDDUDDRULDLDRDRDDRUDRUDURRRRUUDUDRLDURLDLRRUURRDDUDLLDUDRRURRLRRRRRLDUDDRLLLURUDRRUDRLRDUDUUUUUDURULLDUUDLRUUULDUUURURLUUDULDURUDDDLRRRDDRRDLRULLLRDDRLRLUULDUUULLLLDLRURLRRDURRLDLLLDURDLLUDDDLLDDURDDULURDRRRDDDLDDURRULUUDDLULLURULUULDLDDLUDRURURULUDDULRDRLDRRRUUUURUULDRLRRURRLULULURLLDRLRLURULRDDDULRDDLUR',
	'RURRULLRRDLDUDDRRULUDLURLRRDDRDULLLUUDDDRDDRRULLLDRLRUULRRUDLDLLLRLLULDRLDDDLLDDULLDRLULUUUURRRLLDRLDLDLDDLUDULRDDLLRLLLULLUDDRDDUUUUDLDLRRDDRDLUDURRUURUURDULLLLLULRRLDRLRDLUURDUUDLDRURURLLDRRRLLLLRDLDURRLRRLLRUUDDUULLRLUDLRRRRRURUDDURULURRUULRDDULUUDUUDDRDDDDDUUUDDDRRLDDRRDDUUULDURLDULURDRDLLURDULRUDRUULUULLRRRRLRUUDDUDLDURURLRRRULRDRRUDDRDDRLRRRLRURRRUULULLLUULLLULLUDLRDLDURRURDLDLRDUULDRLLRRLDUDDUULULR',
];

$testData = [
	'ULL',
	'RRDDD',
	'LURDL',
	'UUUUD',
];

$codeBreaker = new KeypadCodeBreaker('crazy');
$codeBreaker->findCombination($data);
